<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BlackTom&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/0a3b45b57019fdb91526c8fbe5a2c425</icon>
  <subtitle>阳光洒肩头，仿佛自由身</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blacktomm.github.io/"/>
  <updated>2020-07-29T05:15:54.583Z</updated>
  <id>https://blacktomm.github.io/</id>
  
  <author>
    <name>Black Tom</name>
    <email>wtom1006@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git</title>
    <link href="https://blacktomm.github.io/2020/07/29/git-%E6%A6%82%E7%BB%8D/"/>
    <id>https://blacktomm.github.io/2020/07/29/git-%E6%A6%82%E7%BB%8D/</id>
    <published>2020-07-29T01:57:00.000Z</published>
    <updated>2020-07-29T05:15:54.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git使用指南"><a href="#git使用指南" class="headerlink" title="git使用指南"></a>git使用指南</h1><h2 id="文件的上传与下载"><a href="#文件的上传与下载" class="headerlink" title="文件的上传与下载"></a>文件的上传与下载</h2><p>​    <img src="https://user-gold-cdn.xitu.io/2018/12/29/167f9d6dcabe764b?imageslim" alt=""></p><h2 id="如何提交本地工作区文件至远程仓库"><a href="#如何提交本地工作区文件至远程仓库" class="headerlink" title="如何提交本地工作区文件至远程仓库"></a>如何提交本地工作区文件至远程仓库</h2><p>至于如何安装Git可参考<a href="https://backlog.com/git-tutorial/cn/intro/intro2_1.html" target="_blank" rel="noopener">猴子都能懂的Git入门</a>教程1部分，以下介绍两种方法上传文件至github：</p><ol><li><p>第一种是不使用命令，首先登陆github网站，创建一个新的Repository，而后在该库code页面内可看到<code>Upload files</code>按钮，点击将你想要上传的文件夹拖动到方框内等待一段时间即可上传成功。这种做法方便但不适于除个人以外的团队项目</p></li><li><p>第二种依赖于TortoiseGit，即之前建议安装的git汉化版软件</p><ul><li><p>使用前需设置好个人账号及邮箱：鼠标右键-&gt;点击TortoiseGit-&gt;设置，点击Git可以看到<strong>名称</strong>与<strong>Email</strong>标签，填入gtihub账号用户名及申请邮箱即可。也可以通过git bash命令行设置：</p><p>鼠标右键点击git bash通过输入命令设置</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"你的github用户名"</span><br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"注册邮箱"</span><br></code></pre></td></tr></table></figure><p><strong>配置信息查询：</strong></p><p> config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local  底层配置会覆盖顶层配置 分别使用–system/global/local 可以定位到配置文件 </p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--system --list查看系统config<br>git<span class="hljs-built_in"> config </span>--global  --list查看当前用户（global）配置<br> git<span class="hljs-built_in"> config </span>--local  --list查看当前仓库配置信息<br></code></pre></td></tr></table></figure></li><li><p>在git bash中创建本地库</p><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"> <span class="hljs-keyword">mkdir</span> <span class="hljs-keyword">test</span>   <span class="hljs-comment">//创建test文件夹</span><br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">test</span><span class="hljs-comment">//进入该文夹</span><br>git init<span class="hljs-comment">//初始化，生成 .git 文件</span><br></code></pre></td></tr></table></figure><p>也可以手动创建该文件夹，在该文件夹下右键点击 <code>git在这里创建版本库</code></p></li><li><p>利用SSH完成git 与gitlab绑定，便于提交代码，可<a href="https://blog.csdn.net/qq_35246620/article/details/69061355" target="_blank" rel="noopener">参考</a></p></li><li><p>backlog推送提交</p><p>用户名及密码输错了如何更改：在控制面板》用户账户》凭据管理器》Windows凭据 下修改即可</p></li></ul></li><li><p><a href="https://blog.csdn.net/question_720520/article/details/81182218" target="_blank" rel="noopener">WSL配置ssh agent连接到github</a></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs git">mkdir XX      (创建一个空目录 XX指目录名)<br>pwd：          显示当前目录的路径。<br>git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。<br>git add XX        把xx文件添加到暂存区去。<br><br>git commit –m “XX”   提交文件 –m 后面的是注释。<br>git commit --amend   对最近一次提交信息做修正<br>git log -1  提交信息修改后查询<br><br>git status        查看仓库状态<br>git diff  XX      查看XX文件修改了那些内容<br>git diff --cached  对同一文件修改后再次添加到工作区后，与工作区原先版本进行比较<br>git log          查看历史记录<br>git reset  –hard HEAD^ 或者 git reset  –hard HEAD~ 回退到上一个版本<br>                    (如果想回退到100个版本，使用git reset –hard HEAD\~100 )<br>git reset HEAD丢弃当前暂存区所有提交记录<br>git reset HEAD -- file1 file2   丢弃当前暂存区对应文件记录<br>git checkout -- file 将暂存区记录同步到工作区，即意味着工作区文件发生变化,可以丢弃工作区的修改<br><br>cat XX         查看XX文件内容<br>git reflog       查看历史记录的版本号id<br>git checkout — XX  把XX文件在工作区的修改全部撤销。<br>git rm XX          删除XX文件<br><br>git remote add origin https:&#x2F;&#x2F;github.com&#x2F;BlackTomm&#x2F;Learning-center 关联一个远程库<br>git push –u origin master  (第一次要用-u 以后不需要)把当前master分支推送到远程库<br>git clone https:&#x2F;&#x2F;github.com&#x2F;BlackTomm&#x2F;Learning-center  从远程库中克隆<br><br>git checkout –b dev  创建dev分支 并切换到dev分支上<br>git branch  查看当前所有的分支<br>git checkout master 切换回master分支<br>git merge dev    在当前的分支上合并dev分支<br>git branch –d dev 删除dev分支<br>git branch name  创建分支<br><br>git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作<br>git stash list 查看所有被隐藏的文件列表<br>git stash apply 恢复被隐藏的文件，但是内容不删除<br>git stash drop 删除文件<br>git stash pop 恢复文件的同时 也删除文件<br><br>git remote -v 查看远程版本库信息<br>git remote add githup &lt;url&gt; 添加githup远程版本库<br>git fetch github 拉取远程版本库<br>git merge -h 查看合并帮助信息<br>git merge --allow-unrelated-histories githup&#x2F;master 合并githup上的master分支（两分支不是父子关系，所以合并需要添加 --allow-unrelated-histories）<br>git push githup 推送同步到githup仓库<br>git push origin master  Git会把master分支推送到远程库对应的远程分支上<br></code></pre></td></tr></table></figure></li></ol><p>仓库添加文件</p><figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">git remote <span class="hljs-keyword">add</span> origin [<span class="hljs-comment">//your github url] //初次需要执行，绑定github推送仓库，后续不需要执行</span><br><br><span class="hljs-comment">//pull those changes</span><br>git pull origin master <br><br><span class="hljs-comment">// or optionally, 'git pull origin master --allow-unrelated-histories' if you have initialized repo in github and also committed locally</span><br><span class="hljs-comment">//now, push your work to your new repo</span><br><br>git push origin master<br></code></pre></td></tr></table></figure><h3 id="多人协作的工作模式："><a href="#多人协作的工作模式：" class="headerlink" title="多人协作的工作模式："></a>多人协作的工作模式：</h3><ol><li>首先，可以试图用<code>git push origin</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to  origin/</code>。</p><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><ul><li>命令<code>git tag</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a  -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签</li><li>命令<code>git push origin</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/</code>可以删除一个远程标签。</li></ul><h3 id="github连接问题"><a href="#github连接问题" class="headerlink" title="github连接问题"></a>github连接问题</h3><ol><li><p><a href="https://stackoverflow.com/questions/26953071/github-authentication-failed-github-does-not-provide-shell-access" target="_blank" rel="noopener">Github Authentication Failed - … GitHub does not provide shell access</a></p><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">$ ssh -T git@github.com<br>Hi lut! You<span class="hljs-symbol">'ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></figure><p>解决办法：设置远程库url</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git </span><span class="hljs-string">remote </span><span class="hljs-built_in">set-url</span> <span class="hljs-string">origin </span><span class="hljs-string">git@</span><span class="hljs-string">github.</span><span class="hljs-string">com:lut/</span><span class="hljs-string">EvolutionApp.</span><span class="hljs-string">git</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git使用指南&quot;&gt;&lt;a href=&quot;#git使用指南&quot; class=&quot;headerlink&quot; title=&quot;git使用指南&quot;&gt;&lt;/a&gt;git使用指南&lt;/h1&gt;&lt;h2 id=&quot;文件的上传与下载&quot;&gt;&lt;a href=&quot;#文件的上传与下载&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="Git" scheme="https://blacktomm.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://blacktomm.github.io/2020/07/29/git/"/>
    <id>https://blacktomm.github.io/2020/07/29/git/</id>
    <published>2020-07-29T01:57:00.000Z</published>
    <updated>2020-07-29T06:25:12.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git使用指南"><a href="#git使用指南" class="headerlink" title="git使用指南"></a>git使用指南</h1><h2 id="文件的上传与下载"><a href="#文件的上传与下载" class="headerlink" title="文件的上传与下载"></a>文件的上传与下载</h2><p>​    <img src="https://user-gold-cdn.xitu.io/2018/12/29/167f9d6dcabe764b?imageslim" alt=""></p><h2 id="如何提交本地工作区文件至远程仓库"><a href="#如何提交本地工作区文件至远程仓库" class="headerlink" title="如何提交本地工作区文件至远程仓库"></a>如何提交本地工作区文件至远程仓库</h2><p>至于如何安装Git可参考<a href="https://backlog.com/git-tutorial/cn/intro/intro2_1.html" target="_blank" rel="noopener">猴子都能懂的Git入门</a>教程1部分，以下介绍两种方法上传文件至github：</p><ol><li><p>第一种是不使用命令，首先登陆github网站，创建一个新的Repository，而后在该库code页面内可看到<code>Upload files</code>按钮，点击将你想要上传的文件夹拖动到方框内等待一段时间即可上传成功。这种做法方便但不适于除个人以外的团队项目</p></li><li><p>第二种依赖于TortoiseGit，即之前建议安装的git汉化版软件</p><ul><li><p>使用前需设置好个人账号及邮箱：鼠标右键-&gt;点击TortoiseGit-&gt;设置，点击Git可以看到<strong>名称</strong>与<strong>Email</strong>标签，填入gtihub账号用户名及申请邮箱即可。也可以通过git bash命令行设置：</p><p>鼠标右键点击git bash通过输入命令设置</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"你的github用户名"</span><br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"注册邮箱"</span><br></code></pre></td></tr></table></figure><p><strong>配置信息查询：</strong></p><p> config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local  底层配置会覆盖顶层配置 分别使用–system/global/local 可以定位到配置文件 </p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--system --list查看系统config<br>git<span class="hljs-built_in"> config </span>--global  --list查看当前用户（global）配置<br> git<span class="hljs-built_in"> config </span>--local  --list查看当前仓库配置信息<br></code></pre></td></tr></table></figure></li><li><p>在git bash中创建本地库</p><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"> <span class="hljs-keyword">mkdir</span> <span class="hljs-keyword">test</span>   <span class="hljs-comment">//创建test文件夹</span><br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">test</span><span class="hljs-comment">//进入该文夹</span><br>git init<span class="hljs-comment">//初始化，生成 .git 文件</span><br></code></pre></td></tr></table></figure><p>也可以手动创建该文件夹，在该文件夹下右键点击 <code>git在这里创建版本库</code></p></li><li><p>利用SSH完成git 与gitlab绑定，便于提交代码，可<a href="https://blog.csdn.net/qq_35246620/article/details/69061355" target="_blank" rel="noopener">参考</a></p></li><li><p>backlog推送提交</p><p>用户名及密码输错了如何更改：在控制面板》用户账户》凭据管理器》Windows凭据 下修改即可</p></li></ul></li><li><p><a href="https://blog.csdn.net/question_720520/article/details/81182218" target="_blank" rel="noopener">WSL配置ssh agent连接到github</a></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs git">mkdir XX      (创建一个空目录 XX指目录名)<br>pwd：          显示当前目录的路径。<br>git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。<br>git add XX        把xx文件添加到暂存区去。<br><br>git commit –m “XX”   提交文件 –m 后面的是注释。<br>git commit --amend   对最近一次提交信息做修正<br>git log -1  提交信息修改后查询<br><br>git status        查看仓库状态<br>git diff  XX      查看XX文件修改了那些内容<br>git diff --cached  对同一文件修改后再次添加到工作区后，与工作区原先版本进行比较<br>git log          查看历史记录<br>git reset  –hard HEAD^ 或者 git reset  –hard HEAD~ 回退到上一个版本<br>                    (如果想回退到100个版本，使用git reset –hard HEAD\~100 )<br>git reset HEAD丢弃当前暂存区所有提交记录<br>git reset HEAD -- file1 file2   丢弃当前暂存区对应文件记录<br>git checkout -- file 将暂存区记录同步到工作区，即意味着工作区文件发生变化,可以丢弃工作区的修改<br><br>cat XX         查看XX文件内容<br>git reflog       查看历史记录的版本号id<br>git checkout — XX  把XX文件在工作区的修改全部撤销。<br>git rm XX          删除XX文件<br><br>git remote add origin https:&#x2F;&#x2F;github.com&#x2F;BlackTomm&#x2F;Learning-center 关联一个远程库<br>git push –u origin master  (第一次要用-u 以后不需要)把当前master分支推送到远程库<br>git clone https:&#x2F;&#x2F;github.com&#x2F;BlackTomm&#x2F;Learning-center  从远程库中克隆<br><br>git checkout –b dev  创建dev分支 并切换到dev分支上<br>git branch  查看当前所有的分支<br>git checkout master 切换回master分支<br>git merge dev    在当前的分支上合并dev分支<br>git branch –d dev 删除dev分支<br>git branch name  创建分支<br><br>git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作<br>git stash list 查看所有被隐藏的文件列表<br>git stash apply 恢复被隐藏的文件，但是内容不删除<br>git stash drop 删除文件<br>git stash pop 恢复文件的同时 也删除文件<br><br>git remote -v 查看远程版本库信息<br>git remote add githup &lt;url&gt; 添加githup远程版本库<br>git fetch github 拉取远程版本库<br>git merge -h 查看合并帮助信息<br>git merge --allow-unrelated-histories githup&#x2F;master 合并githup上的master分支（两分支不是父子关系，所以合并需要添加 --allow-unrelated-histories）<br>git push githup 推送同步到githup仓库<br>git push origin master  Git会把master分支推送到远程库对应的远程分支上<br></code></pre></td></tr></table></figure></li></ol><p>仓库添加文件</p><figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">git remote <span class="hljs-keyword">add</span> origin [<span class="hljs-comment">//your github url] //初次需要执行，绑定github推送仓库，后续不需要执行</span><br><br><span class="hljs-comment">//pull those changes</span><br>git pull origin master <br><br><span class="hljs-comment">// or optionally, 'git pull origin master --allow-unrelated-histories' if you have initialized repo in github and also committed locally</span><br><span class="hljs-comment">//now, push your work to your new repo</span><br><br>git push origin master<br></code></pre></td></tr></table></figure><h3 id="多人协作的工作模式："><a href="#多人协作的工作模式：" class="headerlink" title="多人协作的工作模式："></a>多人协作的工作模式：</h3><ol><li>首先，可以试图用<code>git push origin</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to  origin/</code>。</p><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><ul><li>命令<code>git tag</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a  -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签</li><li>命令<code>git push origin</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/</code>可以删除一个远程标签。</li></ul><h3 id="github连接问题"><a href="#github连接问题" class="headerlink" title="github连接问题"></a>github连接问题</h3><ol><li><p><a href="https://stackoverflow.com/questions/26953071/github-authentication-failed-github-does-not-provide-shell-access" target="_blank" rel="noopener">Github Authentication Failed - … GitHub does not provide shell access</a></p><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">$ ssh -T git@github.com<br>Hi lut! You<span class="hljs-symbol">'ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></figure><p>解决办法：设置远程库url</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git </span><span class="hljs-string">remote </span><span class="hljs-built_in">set-url</span> <span class="hljs-string">origin </span><span class="hljs-string">git@</span><span class="hljs-string">github.</span><span class="hljs-string">com:lut/</span><span class="hljs-string">EvolutionApp.</span><span class="hljs-string">git</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git使用指南&quot;&gt;&lt;a href=&quot;#git使用指南&quot; class=&quot;headerlink&quot; title=&quot;git使用指南&quot;&gt;&lt;/a&gt;git使用指南&lt;/h1&gt;&lt;h2 id=&quot;文件的上传与下载&quot;&gt;&lt;a href=&quot;#文件的上传与下载&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="-git" scheme="https://blacktomm.github.io/tags/git/"/>
    
  </entry>
  
</feed>
