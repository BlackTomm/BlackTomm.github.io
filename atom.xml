<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BlackTom&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/0a3b45b57019fdb91526c8fbe5a2c425</icon>
  <subtitle>阳光洒肩头，仿佛自由身</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blacktomm.github.io/"/>
  <updated>2021-08-19T15:41:36.612Z</updated>
  <id>https://blacktomm.github.io/</id>
  
  <author>
    <name>Black Tom</name>
    <email>wtom1006@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手把手搭个操作系统（一）</title>
    <link href="https://blacktomm.github.io/2021/08/19/operating-system-step-01/"/>
    <id>https://blacktomm.github.io/2021/08/19/operating-system-step-01/</id>
    <published>2021-08-19T14:58:18.000Z</published>
    <updated>2021-08-19T15:41:36.612Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是操作系统实战的第一篇，主要讲述如何利用 bochs 创建启动盘。</p><h2 id="配置Bochs"><a href="#配置Bochs" class="headerlink" title="配置Bochs"></a>配置Bochs</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>Bochs 需要在 X11 环境下运行，因此你的 Linux 系统必须已经安装了X Window 系统才能使用Bochs。 因为 Bochs 是用C++写的，所以这里要安装GNU gcc/g++编译器。<br> 安装命令如下：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">sudo apt-<span class="hljs-keyword">get</span> install build-essential <br>sudo apt-<span class="hljs-keyword">get</span> install xorg-dev <br>sudo apt-<span class="hljs-keyword">get</span> install bison <br>sudo apt-<span class="hljs-keyword">get</span> install g++<br></code></pre></td></tr></table></figure><p>别忘了安装<code>bochs-x</code></p><h3 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h3><ul><li><p>去<a href="https://sourceforge.net/projects/bochs/files/" target="_blank" rel="noopener">官网</a>下载 bochs-2.6.11.tar.gz</p></li><li><p>解压缩 tar -vxzf bochs-2.6.11.tar.gz并进入解压目录bochs-2.6.11</p></li><li><p>配置boch，在bochs-2.6.11目录下执行</p>  <figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">./configure --prefix=/home/onedy/Public/software/bochs/bochs-pre --enable-debugger --enable-disasm --enable-iodebug --enable-iodebug --enable-x86-debugger --with-x --with-x11 libs='-lx11'<br><br>如果出现错误，根据提示修改，如<br><span class="hljs-keyword">ERROR: </span>pkg-config was not found, or unable to access the gtk+<span class="hljs-string">-2</span>.0 package.<br>Install pkg-config and the gtk+ development package,<br>or disable the gui debugger, or the wxWidgets display library (whichever is being used).<br><br>说明需要安装gtk+<span class="hljs-string">-2</span>.0<br>sudo apt-get install gtk2.0<br>参考自 https://askubuntu.com/questions/765526/how-to-install-gtk2<span class="hljs-string">-0</span><br></code></pre></td></tr></table></figure><p>  注意各行结尾的’&#39;字符前面有个空格。下面简要说明一下configure 的参数。</p>  <figure class="highlight haml"><table><tr><td class="code"><pre><code class="hljs haml">-<span class="ruby">-prefix=<span class="hljs-regexp">/your_path/bochs</span> 是用来指定bochs 的安装目录，根据个人实际情况将your_path 替换为自己待安装的路径。</span><br><span class="ruby">--enable-debugger 打开bochs 自己的调试器。</span><br><span class="ruby">--enable-disasm 使bochs 支持反汇编。</span><br><span class="ruby">--enable-iodebug 启用io 接口调试器。</span><br><span class="ruby">--enable-x86-debugger 支持x86 调试器。</span><br><span class="ruby">--with-x 使用x windows。</span><br><span class="ruby">--with-x11 使用x11 图形用户接口。</span><br></code></pre></td></tr></table></figure><p>  上面的编译参数是不支持gdb 远程调试的，如果想用gdb 调试，就要将参数–enable-debugger 替换为<br>  –enable-gdb-stub。<br>  –enable-gdb-stub 用来打开对gdb 的支持，这样我们就可以用gdb 来远程调试了。<br>  不过，需要注意的是不能同时打开这两个开关，否则bochs 会报错，即configure：error：–enable-debugger and –enable-gdb-stub are mutually exclusive。<br>  也就是说，bochs 本身是支持调试的，要么用本身的调试功能，要么用gdb 的调试功能，鱼和熊掌在一台模拟器上不可兼得。</p></li></ul><ul><li><p>正确运行后，会产生一个Makefile文件，然后 sudo make，如果执行不成功，需要排查后做make clean，再执行sudo make</p></li><li><p>安装 sudo make install，就会在指定的bochs 安装目录下（如/home/onedy/Public/software/bochs/bochs-pre）生成对应文件</p></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装好bochs之后我们要对它进行配置，这个配置大家可以参考安装目录下的bochsrc-sample.txt，该文件的路径在bochs安装目录下的share/doc/bochs/bochsrc-sample.txt，部分代码如下</p><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">###############################################<br># Configuration file for Bochs<br>###############################################<br><br><span class="hljs-number">1.5</span> 运行bochs<br><span class="hljs-number">49</span><br># 第一步，首先设置Bochs 在运行过程中能够使用的内存，本例为<span class="hljs-number">32</span>MB。<br># 关键字为：megs<br>megs:<span class="hljs-number">32</span><br><br># 第二步，设置对应真实机器的BIOS 和VGA BIOS。<br># 对应两个关键字为：romimage 和 vgaromimage<br>romimage: file=/实际路径/bochs/share/bochs/BIOS-bochs-latest<br>vgaromimage: file=/实际路径/bochs/share/bochs/VGABIOS-lgpl-latest<br><br># 第三步，设置Bochs 所使用的磁盘，软盘的关键字为floppy。<br># 若只有一个软盘，则使用floppya 即可，若有多个，则为floppya，floppyb…<br>#floppya: <span class="hljs-number">1</span>_44=a.img, status=inserted<br><br># 第四步，选择启动盘符。<br>#boot: floppy #默认从软盘启动，将其注释<br>boot: disk #改为从硬盘启动。我们的任何代码都将直接写在硬盘上，所以不会再有读写软盘的操作。<br><br># 第五步，设置日志文件的输出。<br>log: bochs.out<br><br># 第六步，开启或关闭某些功能。<br># 下面是关闭鼠标，并打开键盘。<br>mouse: enabled=<span class="hljs-number">0</span><br>keyboard_mapping: enabled=<span class="hljs-number">1</span>,<br>map=/实际路径/bochs/share/bochs/keymaps/x11-pc-us.map<br><br># 硬盘设置<br>ata0: enabled=<span class="hljs-number">1</span>, ioaddr1=<span class="hljs-number">0x1f0</span>, ioaddr2=<span class="hljs-number">0x3f0</span>, irq=<span class="hljs-number">14</span><br><br># 下面的是增加的bochs 对gdb 的支持，这样gdb 便可以远程连接到此机器的<span class="hljs-number">1234</span> 端口调试了<br>gdbstub: enabled=<span class="hljs-number">1</span>, port=<span class="hljs-number">1234</span>, text_base=<span class="hljs-number">0</span>, data_base=<span class="hljs-number">0</span>, bss_base=<span class="hljs-number">0</span><br>################### 配置文件结束 #####################<br></code></pre></td></tr></table></figure><p>好了，现在将上面的配置文件存为<strong>bochsrc.disk 放在bochs 安装目录</strong>下。（bochs 配置文件位置不固定，<br>名字也不要求固定），后缀.disk 是我人为加的，为了表示此配置文件配置的内容是从硬盘启动，这样较明确。</p><p>个人配置文件 bochsrc.disk 如下，放置于bochs安装目录下</p><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-meta">#首先设置 Bochs 在运行过程中能够使用的内存，本例为 32MB。</span><br><span class="hljs-meta">#关键字为 megs</span><br><span class="hljs-symbol">megs:</span><span class="hljs-number">32</span><br><br><span class="hljs-meta">#设置对应真实机器的 BIOS 和 VGA BIOS 。</span><br><span class="hljs-meta">#对应两个关键字为 ： romimage 和 vgaromimage</span><br><span class="hljs-meta">#romimage:file=安装目录/share/bochs/BIOS-bochs-latest</span><br><span class="hljs-symbol">romimage:</span>file=<span class="hljs-meta-keyword">/home/</span>onedy/Public<span class="hljs-meta-keyword">/software/</span>bochs<span class="hljs-meta-keyword">/bochs-pre/</span>share<span class="hljs-meta-keyword">/bochs/</span>BIOS-bochs-latest<br><span class="hljs-symbol">vgaromimage:</span>file=<span class="hljs-meta-keyword">/home/</span>onedy/Public<span class="hljs-meta-keyword">/software/</span>bochs<span class="hljs-meta-keyword">/bochs-pre/</span>share<span class="hljs-meta-keyword">/bochs/</span>VGABIOS-lgpl-latest <br><br><span class="hljs-meta">#选择启动盘符</span><br><span class="hljs-symbol">boot:</span>disk  <span class="hljs-meta">#从硬盘启动</span><br><br><span class="hljs-meta"># 设置日志文件的输入位置</span><br><span class="hljs-meta">#log:bochs.out</span><br><span class="hljs-symbol">log:</span>bochsout.txt <br><br><span class="hljs-meta"># 关闭鼠标，打开键盘</span><br><span class="hljs-symbol">mouse:</span>enabled=<span class="hljs-number">0</span><br><span class="hljs-symbol">keyboard:</span>keymap=<span class="hljs-meta-keyword">/home/</span>onedy/Public<span class="hljs-meta-keyword">/software/</span>bochs<span class="hljs-meta-keyword">/bochs-pre/</span>share<span class="hljs-meta-keyword">/bochs/</span>keymaps/x11-pc-us.map<br><br><span class="hljs-meta"># 设置硬盘</span><br><span class="hljs-symbol">ata0:</span>enabled=<span class="hljs-number">1</span>,ioaddr1=<span class="hljs-number">0x1f0</span>,ioaddr2=<span class="hljs-number">0x3f0</span>,irq=<span class="hljs-number">14</span><br><span class="hljs-meta"># 启动盘信息，需要先创建</span><br>ata0-master:type=disk,path=<span class="hljs-string">"hd60M.img"</span>, mode=flat,cylinders=<span class="hljs-number">121</span>,heads=<span class="hljs-number">16</span>,spt=<span class="hljs-number">63</span><br></code></pre></td></tr></table></figure><p><strong>注意中英文标点差异，键值对冒号不可省略，注释#号为英文字符</strong></p><h4 id="创建启动盘"><a href="#创建启动盘" class="headerlink" title="创建启动盘"></a>创建启动盘</h4><p>在安装目录下执行</p><figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">onedy<span class="hljs-variable">@onedy</span><span class="hljs-symbol">:~/Public/software/bochs/bochs-pre</span><span class="hljs-variable">$ </span>bin/bximage<br></code></pre></td></tr></table></figure><p>除指定硬盘大小外，其他选择默认即可</p><p><img src="https://pic1.zhimg.com/80/v2-eb962cd79784c2c55fb75ac21263bbdc_720w.jpg" alt=""></p><p><img src="https://pic4.zhimg.com/80/v2-176cc91883d40826aef180e3a7096097_720w.jpg" alt=""></p><p>60代表该硬盘的大小为60M，hd60M.img是我给改硬盘取得名字，最后一行用绿色标记的是我们需要加入到配置文件中的，这是我们硬盘配置好之后，bochs给我们自动生成的硬盘信息，接下来在配置文件的最后一行加上该硬盘的信息，上面已加入配置文件信息。</p><h4 id="启动Bochs"><a href="#启动Bochs" class="headerlink" title="启动Bochs"></a>启动Bochs</h4><p>hd60M.img与配置文件均放在安装目录下/home/onedy/Public/software/bochs/bochs-pre，因为需要读取当前文件夹内容进行启动，具体如下</p><figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">onedy<span class="hljs-variable">@onedy</span><span class="hljs-symbol">:~/Public/software/bochs/bochs-pre</span><span class="hljs-variable">$ </span>bin/bochs -f bochsrc.disk<br></code></pre></td></tr></table></figure><p>然后选择启动模拟器</p><p><img src="https://pic2.zhimg.com/80/v2-8123759ab91d8e6b8d2f6e846e9703d9_720w.jpg" alt=""></p><p>由于开启了调试模式，会显示模拟器黑框，在<strong>控制台输入c</strong>，enter后会显示如下界面</p><p><img src="https://pic2.zhimg.com/80/v2-d2ce4d4cc2b311e8464d78927cc33559_720w.jpg" alt=""></p><p>如果嫌每次启动必须进入bochs文件下，输入这么多字麻烦，可以直接用别名来代替</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd ~<br>vim .bashrc<br>alias bochs='/home/onedy/Public/software/bochs/bochs-pre/bin/bochs -f /home/onedy/Public/software/bochs/bochs-pre/bochsrc.disk'<br>source .bashrc<br></code></pre></td></tr></table></figure><h4 id="Bochs调试"><a href="#Bochs调试" class="headerlink" title="Bochs调试"></a>Bochs调试</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><code class="hljs groovy">打开bochsdbg 启动调试<br>启动后 会在命令行窗口看到 jmpf <span class="hljs-number">0xf000</span>:e05b 说明准备跳转到bios中,还未执行 显示的指令是下一条执行的指令<br>为何物理地址是<span class="hljs-number">0x0000ffffff0</span>?因为当前boch的地址线是32根,然后bochs用64位宽度来表示,现代处理器启动时会把cs的内容设为0xF000,ip的内容设为0xfff0,<br>而且会把其余的高位部分的地址线拉高,因为人们想把bios放在内存的高地址<br>s:单步执行<br><span class="hljs-string">b:</span>设置断点 <span class="hljs-string">"b 0x7c00"</span>意思是处理器执行到地址<span class="hljs-string">"0x7c00"</span>的地方前停下来 再按c<br><span class="hljs-string">c:</span>继续执行<br><span class="hljs-string">r:</span>显示寄存器内容<br><span class="hljs-string">xp:</span>显示显存中的内容<br><span class="hljs-string">q:</span>退出<br><span class="hljs-string">n:</span>自动完成程序中循环 但是对条件转移命令无效(jns等)<br><span class="hljs-string">u:</span>反汇编 可用于越过jns等<br>info <span class="hljs-string">eflags:</span>显示标志寄存器 如果标志名称是小写的,那么该标记为<span class="hljs-number">0</span>,否则为<span class="hljs-number">1</span><br>print-stack x 可以查看当前的栈 x代表显示的数据 如果不使用参数 默认显示前<span class="hljs-number">16</span>个字<br></code></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li>操作系统真相还原 第1章</li><li><a href="https://zhuanlan.zhihu.com/p/35437842" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35437842</a> 配置文件有点小问题</li><li><a href="https://copyright1999.github.io/2020/03/23/Ubuntu18.10%E5%AE%89%E8%A3%85bochs/" target="_blank" rel="noopener">Ubuntu18.10安装bochs</a></li><li>[Ubuntu下Bochs安装与调试配置](</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇是操作系统实战的第一篇，主要讲述如何利用 bochs 创建启动盘。&lt;/p&gt;
&lt;h2 id=&quot;配置Bochs&quot;&gt;&lt;a href=&quot;#配置Bochs&quot; class=&quot;headerlink&quot; title=&quot;配置Bochs&quot;&gt;&lt;/a&gt;配置Bochs&lt;/h2&gt;&lt;h3 id=&quot;前期
      
    
    </summary>
    
    
    
      <category term="programming" scheme="https://blacktomm.github.io/tags/programming/"/>
    
      <category term="operating system" scheme="https://blacktomm.github.io/tags/operating-system/"/>
    
  </entry>
  
  <entry>
    <title>huxblog配置优化</title>
    <link href="https://blacktomm.github.io/2020/07/29/huxblog-optimization/"/>
    <id>https://blacktomm.github.io/2020/07/29/huxblog-optimization/</id>
    <published>2020-07-29T06:50:10.000Z</published>
    <updated>2020-07-29T12:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了基于HuxBlog所做的一些优化，主要涉及到：</p><ul><li><p>允许博客文章页首图及侧边栏头像链接设置为CDN</p></li><li><p>添加Gitalk评论脚本</p></li><li><p>隐藏底部社交账号头像配置</p></li></ul><h2 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h2><p>在命令行中通过 npm 来安装 Hexo：</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p><code>-g</code> 表示全局安装，会将 Hexo 命令加入环境变量中，以使其在 cmd 下有效。</p><p>Hexo 依赖于 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> 和 <a href="https://git-scm.com/download/" target="_blank" rel="noopener">git</a>，在安装 Hexo 之前需要先确保已安装了这两项应用。</p><p>新建博客目录，然后在该路径下执行初始化命令：</p><figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo init<br></code></pre></td></tr></table></figure><p>执行完毕后，将会生成以下文件结构：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">.<br>├── node_modules       <span class="hljs-comment">//依赖安装目录</span><br>├── scaffolds          <span class="hljs-comment">//模板文件夹，新建的文章将会从此目录下的文件中继承格式</span><br>|   ├── draft.md         <span class="hljs-comment">//草稿模板</span><br>|   ├── page.md          <span class="hljs-comment">//页面模板</span><br>|   └── post.md          <span class="hljs-comment">//文章模板</span><br>├── <span class="hljs-keyword">source</span>             <span class="hljs-comment">//资源文件夹，用于放置图片、数据、文章等资源</span><br>|   └── _posts           <span class="hljs-comment">//文章目录</span><br>├── themes             <span class="hljs-comment">//主题文件夹</span><br>|   └── landscape        <span class="hljs-comment">//默认主题</span><br>├── .gitignore         <span class="hljs-comment">//指定不纳入git版本控制的文件</span><br>├── _config.yml        <span class="hljs-comment">//站点配置文件</span><br>├── db.json            <br>├── <span class="hljs-keyword">package</span>.json<br>└── <span class="hljs-keyword">package</span>-lock.json<br></code></pre></td></tr></table></figure><p>可以看到 themes 文件夹下已经有一个名为 landscape 的文件夹了，这是默认主题。</p><p>在根目录下执行如下命令启动 hexo 的内置 Web 服务器</p><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>该命令将会调用 Markdown 引擎解析项目中的博客内容生成网页资源，资源将会存于内存中，所以用户执行完命令之后在项目文件夹中是找不到相关的 Web 资源目录的。该命令还会启动一个简易的 Web 服务器用于提供对内存中网页资源的访问（工作机制类似于 webpack-dev-server），Web 服务器默认监听 4000 端口，用户可在浏览器中通过地址 <code>localhost:4000</code> 访问博客。</p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p><a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">HuxBlog</a>最初由黄玄在Jekyll搭建而成，比较简洁，目前Hexo版本主要由<a href="https://github.com/Kaijun/hexo-theme-huxblog" target="_blank" rel="noopener">Kaijun Chen</a>在维护，并做了不少优化，整体主题代码量相对Next等常见主题要小很多，便于更改。</p><p><img src="https://blog-field-1258773891.cos.ap-beijing.myqcloud.com/my-blog/2020/07/29/huxblog.png" alt=""></p><p>点击Code下载对应zip文件并将 themes 文件夹下huxblog复制到上述  Hexo 对应的 themes 文件夹下, 也可以通过<code>git clone</code>进行下载。打开站点配置文件_config.yml，将 theme 字段的值修改为 huxblog</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">huxblog</span><br></code></pre></td></tr></table></figure><p>重启服务器并刷新可使主题生效，如果重启服务器仍无效，尝试使用 <code>hexo clean</code> 清除缓存。</p><h2 id="站点优化"><a href="#站点优化" class="headerlink" title="站点优化"></a>站点优化</h2><p>由于Kaijun Chen已经给出了自己的站点配置文件<a href="https://github.com/Kaijun/hexo-theme-huxblog/blob/master/_config.yml" target="_blank" rel="noopener">_config.yml</a>，可以作为参照。如果需要优化，则要了解Huxblog主题目录：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">│  LICENSE<br>│  README.md<br>│  _config.yml<br>│<br>├─languages_to_be_added<br>├─layout<br>│  │  <span class="hljs-number">404</span>.ejs<br>│  │  about.ejs<br>│  │  archive.ejs<br>│  │  archives.ejs<br>│  │  index<span class="hljs-selector-class">.ejs</span><span class="hljs-comment">//主页</span><br>│  │  keynote.ejs<br>│  │  layout.ejs<br>│  │  page<span class="hljs-selector-class">.ejs</span><span class="hljs-comment">//文章页面</span><br>│  │  post.ejs<br>│  │  tags.ejs<br>│  │<br>│  └─_partial<br>│          <span class="hljs-selector-tag">footer</span>.ejs<br>│          head.ejs<br>│          <span class="hljs-selector-tag">nav</span>.ejs<br>│          pagination.ejs<br>│<br>└─source<br>    ├─css<br>    ├─fonts<br>    └─js<br></code></pre></td></tr></table></figure><p>根据上述目录，可对对应文件源码进行修改。</p><h3 id="文章页首图及侧边栏头像链接CDN设置"><a href="#文章页首图及侧边栏头像链接CDN设置" class="headerlink" title="文章页首图及侧边栏头像链接CDN设置"></a>文章页首图及侧边栏头像链接CDN设置</h3><p>由于GitHub服务器设在国外，国内也没有对应的CDN, 导致站点图片加载比较缓慢，影响体验，所以针对该主题做了部分优化，便于使用个人图床链接加载图片。个人文章页首图需要在markdown文件头部设置<code>header-img</code>图片链接进行设置，默认只允许添加<code>source/img</code>等文件夹下图片，添加链接则无法访问。</p><p>由 page.ejs 内源码可以看出这主要是因为在图片链接<code>page[&quot;header-img&quot;]</code>前添加了博客URL链接<code>&lt;%= config.root %&gt;</code>导致图片地址解析异常。如果要使用链接，则需要删除页面下图片URL对应的<code>&lt;%= config.root %&gt;</code>代码；如果不设置文章页 <code>header-img</code>则默认访问网站首页下的<code>header-img</code>,也就是站点配置文件<a href="https://github.com/Kaijun/hexo-theme-huxblog/blob/master/_config.yml" target="_blank" rel="noopener">_config.yml</a>中对应的图片链接，其他页面处理方法类似。</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-string">&lt;!--</span> <span class="hljs-string">Page</span> <span class="hljs-string">Header</span>  <span class="hljs-string">博客文章页面图片url--&gt;</span><br><span class="hljs-string">&lt;header</span> <span class="hljs-string">class="intro-header"</span> <span class="hljs-string">style="background-image:</span> <span class="hljs-string">url('&lt;%=</span> <span class="hljs-string">config.root</span> <span class="hljs-string">%&gt;&lt;%=</span> <span class="hljs-string">page["header-img"]</span> <span class="hljs-string">||</span> <span class="hljs-string">config["header-img"]</span> <span class="hljs-string">%&gt;')"&gt;</span><br>    <span class="hljs-string">&lt;div</span> <span class="hljs-string">class="container"&gt;</span><br>        <span class="hljs-string">&lt;div</span> <span class="hljs-string">class="row"&gt;</span><br>            <span class="hljs-string">&lt;div</span> <span class="hljs-string">class="col-lg-8</span> <span class="hljs-string">col-lg-offset-2</span> <span class="hljs-string">col-md-10</span> <span class="hljs-string">col-md-offset-1</span> <span class="hljs-string">"&gt;</span><br><span class="hljs-string">                &lt;div class="</span><span class="hljs-string">site-heading"&gt;</span><br>                    <span class="hljs-string">&lt;h1&gt;&lt;%=</span> <span class="hljs-string">page.title</span> <span class="hljs-string">||</span> <span class="hljs-string">config.title</span> <span class="hljs-string">%&gt;&lt;/h1&gt;</span><br>                    <span class="hljs-string">&lt;!--&lt;hr</span> <span class="hljs-string">class="small"&gt;--&gt;</span><br>                    <span class="hljs-string">&lt;span</span> <span class="hljs-string">class="subheading"&gt;&lt;%=</span> <span class="hljs-string">page.description</span> <span class="hljs-string">||</span> <span class="hljs-string">config.subtitle</span> <span class="hljs-string">||</span> <span class="hljs-string">""</span> <span class="hljs-string">%&gt;&lt;/span&gt;</span><br>                <span class="hljs-string">&lt;/div&gt;</span><br>            <span class="hljs-string">&lt;/div&gt;</span><br>        <span class="hljs-string">&lt;/div&gt;</span><br>    <span class="hljs-string">&lt;/div&gt;</span><br><span class="hljs-string">&lt;/header&gt;</span><br></code></pre></td></tr></table></figure><h3 id="添加Gitalk评论脚本"><a href="#添加Gitalk评论脚本" class="headerlink" title="添加Gitalk评论脚本"></a>添加Gitalk评论脚本</h3><p>Gitalk和Gitment通常用来作为评论脚本，由于Gitment作者已经很久未维护过，所以选择了Gitalk, 毕竟随着时间的改变，难免会出现不兼容的问题。该主题目前提供了多说与disqus评论,也可以作为个人选择。以下就如何在文章页面添加Gitalk进行说明，需要对page.ejs源码进行修改，主要是设置div并使用Js进行渲染。</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs ejs">&lt;!-- 如果开启评论功能 --&gt;<br>&lt;% if(page.comments) &#123; %&gt;<br>        &lt;hr&gt;<br>        &lt;!-- 包含多说评论框，此处省略 --&gt;<br>        <br>        &lt;!-- disqus 评论框  --&gt;<br>        &lt;% if(config[&#39;disqus_username&#39;]) &#123; %&gt;<br>                   &lt;!-- disqus 评论框 start --&gt;<br>                   &lt;div class&#x3D;&quot;comment&quot;&gt;<br>                       &lt;div id&#x3D;&quot;disqus_thread&quot; class&#x3D;&quot;disqus-thread&quot;&gt;&lt;&#x2F;div&gt;<br>                   &lt;&#x2F;div&gt;<br>                   &lt;!-- disqus 评论框 end --&gt;<br>                   &lt;% &#125; %&gt;<br>         <br>        &lt;!-- disqus下方添加id&#x3D;&quot;gitalk-container&quot;的div--&gt;<br>&lt;% if(config[&#39;gitalk_enable&#39;]) &#123; %&gt;<br>               &lt;!-- gitalk 评论框 start --&gt;<br>               &lt;div class&#x3D;&quot;comment&quot;&gt;<br>                   &lt;div id&#x3D;&quot;gitalk-container&quot;&gt;&lt;&#x2F;div&gt; <br>               &lt;&#x2F;div&gt;<br>               &lt;!-- gitalk 评论框 end --&gt;<br>               &lt;% &#125; %&gt;<br>               ......<br></code></pre></td></tr></table></figure><p>然后在下方添加Gitalk对应的CSS，JS代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs ejs">&lt;% if(config[&#39;disqus_username&#39;]) &#123; %&gt;<br>                    &lt;!-- disqus 公共JS代码 start (一个网页只需插入一次) --&gt;<br>                    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;<br>                        &#x2F;* * * CONFIGURATION VARIABLES * * *&#x2F;<br>                        var disqus_shortname &#x3D; &quot;&lt;%&#x3D; config[&#39;disqus_username&#39;] %&gt;&quot;;<br>                        var disqus_identifier &#x3D; &quot;&lt;%&#x3D; page.permalink %&gt;&quot;;<br>                        var disqus_url &#x3D; &quot;&lt;%&#x3D; page.permalink %&gt;&quot;;<br><br>                        (function() &#123;<br>                            var dsq &#x3D; document.createElement(&#39;script&#39;); dsq.type &#x3D; &#39;text&#x2F;javascript&#39;; dsq.async &#x3D; true;<br>                            dsq.src &#x3D; &#39;&#x2F;&#x2F;&#39; + disqus_shortname + &#39;.disqus.com&#x2F;embed.js&#39;;<br>                            (document.getElementsByTagName(&#39;head&#39;)[0] || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(dsq);<br>                        &#125;)();<br>                    &lt;&#x2F;script&gt;<br>                    &lt;!-- disqus 公共JS代码 end --&gt;<br>                    &lt;% &#125; %&gt;<br>                    <br>                      &lt;!-- 此处添加Gitalk代码  --&gt;<br>                    &lt;% if(config[&#39;gitalk_enable&#39;]) &#123; %&gt;<br>                        &lt;!-- Gitalk start --&gt;<br>                        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.css&quot;&gt;<br>                        &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;gitalk@1&#x2F;dist&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt; <br>                        &lt;script&gt;<br>                            var gitalk  &#x3D; new Gitalk (&#123;<br>                                id: window.location.pathname,   &#x2F;&#x2F; Ensure uniqueness and length less than 50<br>                                clientID: &quot;&lt;%&#x3D; config[&#39;comment_gitalk_clientId&#39;] %&gt;&quot;,<br>                                clientSecret: &quot;&lt;%&#x3D; config[&#39;comment_gitalk_clientSecret&#39;] %&gt;&quot;,<br>                                repo: &quot;&lt;%&#x3D; config[&#39;comment_gitalk_repo&#39;] %&gt;&quot;,<br>                                owner: &quot;&lt;%&#x3D; config[&#39;github_username&#39;] %&gt;&quot;,<br>                                admin: &quot;&lt;%&#x3D; config[&#39;github_username&#39;] %&gt;&quot;,<br>                                id: location.pathname,<br>                                distractionFreeMode: false  &#x2F;&#x2F; Facebook-like distraction free mode<br>                            &#125;)<br>                            gitalk.render(&#39;gitalk-container&#39;)<br>                    &lt;&#x2F;script&gt; <br>                    &lt;!-- Gitalk end --&gt;<br>                    &lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p>由以上代码可以看到还需要clientID， clientSecret等仓库配置参数，这些参数需要创建一个单独的评论仓库来获取，详情可参考<a href="https://juejin.im/post/5d3ef01ef265da03b81037cd" target="_blank" rel="noopener">静态博客配置 gitalk 评论系统</a>设置。需要注意的是：</p><ul><li><p>Homepage URL: 填写自己的站点域名，如果与来源网站不同，会出现找不到评论的错误页面</p></li><li><p>Authorization callback URL: 这个填写<code>git</code>项目地址</p><p>注册应用成功后再次点击该OAuth App可以看到</p><img src="https://blog-field-1258773891.cos.ap-beijing.myqcloud.com/my-blog/2020/07/29/git-comment.png" alt="git-comment.png" style="zoom: 67%;" /></li></ul><p>然后根据个人配置差异修改站点配置文件<a href="https://github.com/Kaijun/hexo-theme-huxblog/blob/master/_config.yml" target="_blank" rel="noopener">_config.yml</a>，添加如下</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Gitalk settings</span><br><span class="hljs-attr">gitalk_enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">comment_gitalk_clientId:</span> <span class="hljs-string">ce99489e27f66d998fe1</span><br><span class="hljs-attr">comment_gitalk_clientSecret:</span> <span class="hljs-string">fd0bba05f585432aa988cab6c1667a8c5575755f</span><br><span class="hljs-attr">comment_gitalk_repo:</span> <span class="hljs-string">blacktomm.github.io</span><br></code></pre></td></tr></table></figure><p>并替换以上实际参数。</p><h3 id="隐藏底部社交账号头像配置"><a href="#隐藏底部社交账号头像配置" class="headerlink" title="隐藏底部社交账号头像配置"></a>隐藏底部社交账号头像配置</h3><p>个人不太喜欢底部社交账号UI,如果想去除可以尝试如下方法修改 _partial/footer.ejs 或者直接删除对应的代码，以下主要添加了一个配置进行开关, 原始代码如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">if</span> (<span class="hljs-attr">config.twitter_username</span>) &#123; %&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://twitter.com/&lt;%= config.twitter_username %&gt;"</span>&gt;</span><br>                           <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa-stack fa-lg"</span>&gt;</span><br>                               <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-circle fa-stack-2x"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                               <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-twitter fa-stack-1x fa-inverse"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                           <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                       <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span><br></code></pre></td></tr></table></figure><p>以上代码意味着一旦设置侧边导航栏社交账号，底部也会显示，因此需要修改代码逻辑：</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">if</span> (<span class="hljs-attr">config.twitter_username</span> &amp;&amp; <span class="hljs-attr">config.footerSNS</span>) &#123; %&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://twitter.com/&lt;%= config.twitter_username %&gt;"</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa-stack fa-lg"</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-circle fa-stack-2x"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fa fa-twitter fa-stack-1x fa-inverse"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到仅添加了逻辑与操作，不设置则默认为false, 如果想要显示底部社交账号，则需要在站点配置文件<a href="https://github.com/Kaijun/hexo-theme-huxblog/blob/master/_config.yml" target="_blank" rel="noopener">_config.yml</a>下添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">footerSNS：</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>该footer.ejs文件夹下其他账号配置类似，添加 <code>&amp;&amp; config.footerSNS</code>代码即可，设置完成后即可部署到github上：</p><figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">hexo clean <span class="hljs-comment">//清除缓存</span><br>hexo g -d  <span class="hljs-comment">//生成文件并部署</span><br></code></pre></td></tr></table></figure><p>仔细回想一下，从购买域名到如今博客真正搭出来，到如今已经过去两年了。倒不是说很难搭，一方面总感觉很多代码并不会改，一旦想要更改，总是会遇到各种各样的问题，搜不到解决办法总是会有些不舒服的，随着写的代码越多，理解和更改起来也就自如了些；另一方面是的确没多少干货，虽然看过一些书，但总觉得写不出来太多东西，更像是照搬书上的一些话，缺乏自我的思考。虽然犹豫再三，也还是要做的，也希望能帮到你。</p><p><strong>建议阅读</strong>：</p><ul><li><a href="http://yearito.cn/tags/Hexo/" target="_blank" rel="noopener">Hexo 搭建个人博客系列</a>：基于Next主题优化及服务器部署</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要介绍了基于HuxBlog所做的一些优化，主要涉及到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;允许博客文章页首图及侧边栏头像链接设置为CDN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加Gitalk评论脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隐藏底部社交账号头像配置&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
    
      <category term="hexo huxblog" scheme="https://blacktomm.github.io/tags/hexo-huxblog/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://blacktomm.github.io/2020/07/29/git-introduce/"/>
    <id>https://blacktomm.github.io/2020/07/29/git-introduce/</id>
    <published>2020-07-29T01:57:00.000Z</published>
    <updated>2020-07-29T10:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git使用指南"><a href="#git使用指南" class="headerlink" title="git使用指南"></a>git使用指南</h1><h2 id="文件的上传与下载"><a href="#文件的上传与下载" class="headerlink" title="文件的上传与下载"></a>文件的上传与下载</h2><p>​    <img src="https://blog-field-1258773891.cos.ap-beijing.myqcloud.com/my-blog/2020/07/29/git.png" alt=""></p><h2 id="如何提交本地工作区文件至远程仓库"><a href="#如何提交本地工作区文件至远程仓库" class="headerlink" title="如何提交本地工作区文件至远程仓库"></a>如何提交本地工作区文件至远程仓库</h2><p>至于如何安装Git可参考<a href="https://backlog.com/git-tutorial/cn/intro/intro2_1.html" target="_blank" rel="noopener">猴子都能懂的Git入门</a>教程1部分，以下介绍两种方法上传文件至github：</p><ol><li><p>第一种是不使用命令，首先登陆github网站，创建一个新的Repository，而后在该库code页面内可看到<code>Upload files</code>按钮，点击将你想要上传的文件夹拖动到方框内等待一段时间即可上传成功。这种做法方便但不适于除个人以外的团队项目</p></li><li><p>第二种依赖于TortoiseGit，即之前建议安装的git汉化版软件</p><ul><li><p>使用前需设置好个人账号及邮箱：鼠标右键-&gt;点击TortoiseGit-&gt;设置，点击Git可以看到<strong>名称</strong>与<strong>Email</strong>标签，填入gtihub账号用户名及申请邮箱即可。也可以通过git bash命令行设置：</p><p>鼠标右键点击git bash通过输入命令设置</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"你的github用户名"</span><br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"注册邮箱"</span><br></code></pre></td></tr></table></figure><p><strong>配置信息查询：</strong></p><p> config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local  底层配置会覆盖顶层配置 分别使用–system/global/local 可以定位到配置文件 </p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--system --list查看系统config<br>git<span class="hljs-built_in"> config </span>--global  --list查看当前用户（global）配置<br> git<span class="hljs-built_in"> config </span>--local  --list查看当前仓库配置信息<br></code></pre></td></tr></table></figure></li><li><p>在git bash中创建本地库</p><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"> <span class="hljs-keyword">mkdir</span> <span class="hljs-keyword">test</span>   <span class="hljs-comment">//创建test文件夹</span><br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">test</span><span class="hljs-comment">//进入该文夹</span><br>git init<span class="hljs-comment">//初始化，生成 .git 文件</span><br></code></pre></td></tr></table></figure><p>也可以手动创建该文件夹，在该文件夹下右键点击 <code>git在这里创建版本库</code></p></li><li><p>利用SSH完成git 与gitlab绑定，便于提交代码，可<a href="https://blog.csdn.net/qq_35246620/article/details/69061355" target="_blank" rel="noopener">参考</a></p></li><li><p>backlog推送提交</p><p>用户名及密码输错了如何更改：在控制面板》用户账户》凭据管理器》Windows凭据 下修改即可</p></li></ul></li><li><p><a href="https://blog.csdn.net/question_720520/article/details/81182218" target="_blank" rel="noopener">WSL配置ssh agent连接到github</a></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs git">mkdir XX      (创建一个空目录 XX指目录名)<br>pwd：          显示当前目录的路径。<br>git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。<br>git add XX        把xx文件添加到暂存区去。<br><br>git commit –m “XX”   提交文件 –m 后面的是注释。<br>git commit --amend   对最近一次提交信息做修正<br>git log -1  提交信息修改后查询<br><br>git status        查看仓库状态<br>git diff  XX      查看XX文件修改了那些内容<br>git diff --cached  对同一文件修改后再次添加到工作区后，与工作区原先版本进行比较<br>git log          查看历史记录<br>git reset  –hard HEAD^ 或者 git reset  –hard HEAD~ 回退到上一个版本<br>                    (如果想回退到100个版本，使用git reset –hard HEAD\~100 )<br>git reset HEAD丢弃当前暂存区所有提交记录<br>git reset HEAD -- file1 file2   丢弃当前暂存区对应文件记录<br>git checkout -- file 将暂存区记录同步到工作区，即意味着工作区文件发生变化,可以丢弃工作区的修改<br><br>cat XX         查看XX文件内容<br>git reflog       查看历史记录的版本号id<br>git checkout — XX  把XX文件在工作区的修改全部撤销。<br>git rm XX          删除XX文件<br><br>git remote add origin https:&#x2F;&#x2F;github.com&#x2F;BlackTomm&#x2F;Learning-center 关联一个远程库<br>git push –u origin master  (第一次要用-u 以后不需要)把当前master分支推送到远程库<br>git clone https:&#x2F;&#x2F;github.com&#x2F;BlackTomm&#x2F;Learning-center  从远程库中克隆<br><br>git checkout –b dev  创建dev分支 并切换到dev分支上<br>git branch  查看当前所有的分支<br>git checkout master 切换回master分支<br>git merge dev    在当前的分支上合并dev分支<br>git branch –d dev 删除dev分支<br>git branch name  创建分支<br><br>git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作<br>git stash list 查看所有被隐藏的文件列表<br>git stash apply 恢复被隐藏的文件，但是内容不删除<br>git stash drop 删除文件<br>git stash pop 恢复文件的同时 也删除文件<br><br>git remote -v 查看远程版本库信息<br>git remote add githup &lt;url&gt; 添加githup远程版本库<br>git fetch github 拉取远程版本库<br>git merge -h 查看合并帮助信息<br>git merge --allow-unrelated-histories githup&#x2F;master 合并githup上的master分支（两分支不是父子关系，所以合并需要添加 --allow-unrelated-histories）<br>git push githup 推送同步到githup仓库<br>git push origin master  Git会把master分支推送到远程库对应的远程分支上<br></code></pre></td></tr></table></figure></li></ol><p>仓库添加文件</p><figure class="highlight cs"><table><tr><td class="code"><pre><code class="hljs cs">git remote <span class="hljs-keyword">add</span> origin [<span class="hljs-comment">//your github url] //初次需要执行，绑定github推送仓库，后续不需要执行</span><br><br><span class="hljs-comment">//pull those changes</span><br>git pull origin master <br><br><span class="hljs-comment">// or optionally, 'git pull origin master --allow-unrelated-histories' if you have initialized repo in github and also committed locally</span><br><span class="hljs-comment">//now, push your work to your new repo</span><br><br>git push origin master<br></code></pre></td></tr></table></figure><h3 id="多人协作的工作模式："><a href="#多人协作的工作模式：" class="headerlink" title="多人协作的工作模式："></a>多人协作的工作模式：</h3><ol><li>首先，可以试图用<code>git push origin</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to  origin/</code>。</p><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><ul><li>命令<code>git tag</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a  -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签</li><li>命令<code>git push origin</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/</code>可以删除一个远程标签。</li></ul><h3 id="github连接问题"><a href="#github连接问题" class="headerlink" title="github连接问题"></a>github连接问题</h3><ol><li><p><a href="https://stackoverflow.com/questions/26953071/github-authentication-failed-github-does-not-provide-shell-access" target="_blank" rel="noopener">Github Authentication Failed - … GitHub does not provide shell access</a></p><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">$ ssh -T git@github.com<br>Hi lut! You<span class="hljs-symbol">'ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.<br></code></pre></td></tr></table></figure><p>解决办法：设置远程库url</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git </span><span class="hljs-string">remote </span><span class="hljs-built_in">set-url</span> <span class="hljs-string">origin </span><span class="hljs-string">git@</span><span class="hljs-string">github.</span><span class="hljs-string">com:lut/</span><span class="hljs-string">EvolutionApp.</span><span class="hljs-string">git</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git使用指南&quot;&gt;&lt;a href=&quot;#git使用指南&quot; class=&quot;headerlink&quot; title=&quot;git使用指南&quot;&gt;&lt;/a&gt;git使用指南&lt;/h1&gt;&lt;h2 id=&quot;文件的上传与下载&quot;&gt;&lt;a href=&quot;#文件的上传与下载&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="Git" scheme="https://blacktomm.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
